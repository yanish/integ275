4+4
Stuff <- 4+4
stuff =
Stuff
Stuff
install.packages("statnet")
install.packages("coda")
install.packages("coda")
library(statnet)
library(coda)
data(package = "network")                 # List available datasets in the network library
data(flo)                                 # Load a built-in dataset.
flo                                       # Examine the adjacency matrix
class(flo)                                # Check the class of an object
nflo <- network(flo, directed=FALSE)      # Create a network object called nflo from the adjacency matrix
class(nflo)                               # Check the class of an object (again)
nempty <- network.initialize(5)           # Create an empty graph with 5 vertices
nempty                                    # Examine the network's basic summary
# Summaries and visualizations
summary(nflo)                             # Get a similar summary as above, but include the edge list
network.size(nflo)                        # Get the number of vertices in the network
network.edgecount(nflo)                   # Get the number of edges in the network
plot(nflo,displaylabels=T,boxed.labels=F) # Plot the network, including labels (but no boxes)
g <- network.initialize(5)                # Create an empty graph with 5 vertices (again)
g[1,2] <- 1                               # Add an edge from vertex 1 to 2
g                                         # Examine the resulting graph
g[1,2] <- 0                               # Remove the edge from vertex 1 to 2
g                                         # Check the network (it's gone!)
# Checking the adjacency matrix
nflo[9,3]                                 # Check whether there is an edge from 9 to 3
nflo[9,]                                  # Check the entire row for 9
nflo[1:4,5:8]                             # Check subsets of the adjacency matrix against each other
nflo[-9,-9]                               # Negative numbers *exclude* nodes
# Vertex Attributes
nflo %v% "vertex.names"                   # Check the contents of the vertex attribute named "vertex.names"
nflo %v% "woo" <- letters[1:16]           # Add attributes to vertices
nflo %v% "woo"                            # Check the contents of the vertex attribute named "woo"
nflo %v% "stuff" <- "hello world"         # Create a new attribute called "stuff and set it to "hello world"
nflo %v% "stuff"                          # Check the contents of the vertex attribute named "stuff"
# Simple SNA stuff
betweenness(nflo)                         # Get the betweenness centrality scores for each node
isolates(nflo)                            # Get the isolates in the network
data(package="ergm")
data(florentine)
flomarriage
plot(flomarriage)
set.seed(0)
plot(flomarriage)
set.seed(0)
plot(flomarriage)
flomodel.01 <- ergm(flomarriage~edges)
flomodel.01
summary(flomodel.01)
flomodel.02 <- ergm(flomarriage~edges+triangle)
summary(flomodel.02)
class(flomodel.02)                        # This is an ergm object
names(flomodel.02)                        # This let's us take a direct look at the components of the object
flomodel.02$coef                          # Pulls out the coefficients for the terms in the model
flomodel.02$mle.lik                       # The approximate log-likelihood for the maximum-likelihood estimate.
# Beyond the scope of this tutorial.
flomodel.02$formula                       # The formula used to create the model
wealth <- flomarriage %v% "wealth"        # Extracts the "wealth" vertex attributes from flomarriage
wealth                                    # I have no idea what the units of this measure is, so I'm going to
plot(flomarriage, vertex.cex=wealth/25)   # Plot the flomarriage network with vertex size proportional to wealth/25
flomodel.03 <- ergm(flomarriage~edges+nodecov("wealth"))
summary(flomodel.03)
data(samplk)
ls()
# We want to use samplk3, a netwok on Sampson's Monks
samplk3
plot(samplk3)                             # Hmm. Pretty hard to see what's going on here.
samplk3
par(mar=c(0,0,0,0)+0.5)                   # Let's fix the margins of the plot
plot(samplk3)                             # That's a little better.
samplk3.degreedist <- table(degree(samplk3, cmode="outdegree"))
samplk3.degreedist
sampmodel.01 <- ergm(samplk3~edges+mutual) # Let's see if there is a statistically significant tendency for ties to
# be reciprocated (mutual likes)
summary(sampmodel.01)
# How might we interpret the results?
# Let's try a larger network
data(faux.mesa.high)
mesa <- faux.mesa.high                                             # Fake data set for friendships in a highschool
plot(mesa)                                                         # Check the general look of the network
mesa                                                               # Take a look at the vertices, edges, and vertex
# attributes (Grade, Race, Sex)
plot(mesa, vertex.col="Grade")                                     # Let's colour the vertices based on Grade
legend('bottomleft',fill=7:12,legend=paste('Grade',7:12),cex=0.75) # Let's add a legend that tells us what colours
fauxmodel.01 <- ergm(mesa ~edges + nodematch('Grade',diff=T) + nodematch('Race',diff=T))
fauxmodel.01 <- ergm(mesa ~edges + nodematch('Grade',diff=T) + nodematch('Race',diff=T))
# You probably got the following error:
# Observed statistic(s) nodematch.Race.Black and nodematch.Race.Other are at their smallest attainable values.
# Their coefficients will be fixed at -Inf.
# That's interesting, but what does it mean?
# Let's look at the frequencies of race and the mixing table.
table(mesa %v% "Race") # Create a table of the Race vertex attributes from mesa
mixingmatrix(mesa, "Race")
# As you can see, this data has very few "Black" and "Other" students
# Not only are their frequencies small, but the number of mutual ties within themselves are non-existent.
# This leads to a problem sometimes called The Law of Small Numbers.
# When one tries to generalize from a small sample size there is a danger of picking up on biases that would be
# washed away by a larger sample.
# Essentially, when your sample size is too small, you can't trust your generalizations.
# This is especially difficult when trying to test whether a potentially rare effect is there or not.
# This error tells us that the number of "Black" and "Other" students is too small to safely say one way or another
# whether the lack of
# within-race ties is due to any particular mechanism. So, rather than set it to 0, which would indicate that it
# can't happen, the program sets
# it to an impossible value, -Inf, to indicate the issue.
# Let's see what we can interpret from the results
summary(fauxmodel.01)
# We are seeing significant levels of homophily for the following attributes:
# Grade 7 students are significantly more likely to form ties with each other than expected by random chance
# Grade 8 students are significantly more likely to form ties with each other than expected by random chance
# Grade 9 students are significantly more likely to form ties with each other than expected by random chance
# Grade 10 students are significantly more likely to form ties with each other than expected by random chance
summary(fauxmodel.01)
fauxmodel.01 <- ergm(mesa ~edges + nodematch('Grade',diff=T) + nodematch('Race',diff=T))
summary(fauxmodel.01)
flomodel.03
flomodel.03$formula
summary(flomodel.03)
flomodel.03.sim <- simulate(flomodel.03, nsim = 10) # Simulate 10 networks and assign them to an object we call flomodel.03.sim
class(flomodel.03.sim)                              # It is a "network.list" class
length(flomodel.03.sim)                             # Check the length of the list (mostly just to be sure that it does what we
# think it does)
summary(flomodel.03.sim)                            # A quick summary of the object
flomodel.03.sim[[5]]                                # Double brackets pulls an element out of a list from position [[#]]
class(flomodel.03.sim[[5]])                         # This is a network class
# Since we're dealing with a network, we can do all the things we are now familiar with.
plot(flomodel.03.sim[[5]])
plot(flomodel.03.sim[[5]])
plot(flomodel.03.sim[[5]])
plot(flomarriage)
par(mar=c(0,0,0,0)+4.5) # Changing margins to deal with the following plots
data('faux.magnolia.high')
magnolia <- faux.magnolia.high
# Let's start with a super simple Bernoulli model, accounting only for the number of edges.
mag <- ergm(magnolia~edges)
summary(mag)
mag.gof <- gof(mag~degree)
plot(mag.gof)
plot(mag.gof)
plot(flomarriage)
plot(mag.gof)
mag.01 <- ergm(magnolia~edges+nodematch('Grade')+nodematch('Race')+nodematch('Sex'),
control = control.ergm(seed=1), verbose=T)
summary(mag.01)
mag.01.gof <- gof(mag.01~degree)
mag.02 <- ergm(magnolia~edges+gwdsp(0.5,fixed=T)+nodematch('Grade')+nodematch('Race')+nodematch('Sex'),
control = control.ergm(seed=1), verbose=T)
summary(mag.02)
mag.02.gof <- gof(mag.02~degree)
# What happens if we replace the gwdsp with the gwesp (Geometrically Weighted Edgewise Shared Partner)?
mag.03 <- ergm(magnolia~edges+gwesp(0.5,fixed=T)+nodematch('Grade')+nodematch('Race')+nodematch('Sex'),
control = control.ergm(seed=1), verbose=T)
summary(mag.03)
mag.03.gof <- gof(mag.03~degree)
# I'm going to cheat a bit and say that we should take a look at setting the alpha to 0.4
# I did some trial and error beforehand.
mag.04 <- ergm(magnolia~edges+gwesp(0.4,fixed=T)+nodematch('Grade')+nodematch('Race')+nodematch('Sex'),
control = control.ergm(seed=1), verbose=T)
summary(mag.04)
mag.04.gof <- gof(mag.04~degree)
# Why don't we add another term for the number of triangles?
mag.05 <- ergm(magnolia~edges+triangle+gwesp(0.4,fixed=T)+nodematch('Grade')+nodematch('Race')+nodematch('Sex'),
control = control.ergm(seed=1), verbose=T)
# Uhhh... That's not good. We've got a degenerate model. This combination of terms breaks the model. We can't use it.
# We can't even get a summary or goodness of fit. Try it out.
summary(mag.05)
mag.05.gof <- gof(mag.05~degree)
mag.06 <- ergm(magnolia~edges+balance+gwesp(0.4,fixed=T)+nodematch('Grade')+nodematch('Race')+nodematch('Sex'),
control = control.ergm(seed=1), verbose=T)
# Well that's an interesting error message. Let's see what we've got in the summary.
summary(mag.06)
summary(mag.06)
library(igraph)
network <- read.graph("Users/Yanish/Documents/winter_2016/Integ_275/challenge_1", format = c("graphml"))
network <- read.graph("Users/Yanish/Documents/winter_2016/Integ_275/challenge_1/aid2011.graphml", format = c("graphml"))
network <- read.graph("Users/Yanish/Documents/winter_2016/Integ_275/challenge_1/aid2011.graphml.txt", format = c("graphml"))
network <- read.graph("Users/Yanish/Documents/winter_2016/Integ_275/challenge_1/aid2011.graphml", format = c("graphml"))
library(igraph)
network <- read.graph("Users/Yanish/Documents/winter_2016/Integ_275/challenge_1/aid2011.graphml", format = c("graphml"))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("ggplot2")
library(igraph)
network <- read.graph("Users/Yanish/Documents/winter_2016/Integ_275/challenge_1/aid2011.graphml", format = c("graphml"))
library(ggplot2)
library(igraph)
network <- igraph:read.graph("Users/Yanish/Documents/winter_2016/Integ_275/challenge_1/aid2011.graphml", format = c("graphml"))
net <- read.graph("Users/Yanish/Documents/winter_2016/Integ_275/challenge_1/aid2011.graphml", format = c("graphml"))
net <- read.graph("Users/Yanish/Documents/winter_2016/Integ_275/challenge_1/aid2011", format = c("graphml"))
net <- read.graph("Users/Yanish/Desktop/aid2011.graphml.txt", format = c("graphml"))
quit
library(igraph)
net <- read.graph("Users/Yanish/Desktop/aid2011.graphml.txt", format = c("graphml"))
net <- read.graph("/Users/Yanish/Desktop/aid2011.graphml.txt", format = c("graphml"))
network <- read.graph("/Users/Yanish/Documents/winter_2016/Integ_275/challenge_1/aid2011.graphml.txt", format = c("graphml"))
network
plot(network)
par(mar=c(0,0,0,0)+.1)
l1 = layout.kamada.kawai(Net)
set.seed(875)
l1 = layout.kamada.kawai(network)
set.seed(875)
par(mar=c(0,0,0,0)+.1)
l1 = layout.kamada.kawai(network)
plot(network, layout = l1,
vertex.label = NA,
vertex.color = "blue",
vertex.size = 3 )
network <- delete.vertices(network, which(degree(network) < 1))
set.seed(875)
par(mar=c(0,0,0,0)+.1)
l1 = layout.kamada.kawai(network)
plot(network, layout = l1,
vertex.label = NA,
vertex.color = "blue",
vertex.size = 3 )
To compute eigenvector centrality:
set.seed(875)
pdf("figures/plot1.pdf")
par(mar=c(0,0,0,0)+.1)
l1 = layout.fruchterman.reingold(network)
plot(network, layout = l1,
vertex.label = NA,
vertex.color = "blue",
vertex.size = 3 )
dev.off()
pdf("figures/plot1.pdf")
par(mar=c(0,0,0,0)+.1)
l1 = layout.fruchterman.reingold(network)
plot(network, layout = l1,
vertex.label = NA,
vertex.color = "blue",
vertex.size = 3 )
setwd("/Users/Yanish/Documents/Integ_275/challenge_1/")
pdf("figures/plot1.pdf")
par(mar=c(0,0,0,0)+.1)
l1 = layout.fruchterman.reingold(network)
plot(network, layout = l1,
vertex.label = NA,
vertex.color = "blue",
vertex.size = 3 )
dev.off()
library(igraph)
library(network)
library(ggplot2)
library(statnet)
library(ndtv)
setwd("/Users/Yanish/Documents/winter_2016/Integ_275/final")
dat <- read.csv("Data/FinalAdjacencyMatrix.csv")
att <- read.csv("Data/EnronEmployeeInformation.csv")
matrix <- as.matrix(read.csv("Data/FinalAdjacencyMatrix.csv", sep=",", header=TRUE, row.names=1))
network <- graph.adjacency(matrix,weighted=TRUE)
network <- simplify(network, remove.multiple = FALSE, remove.loops = TRUE)
summary(network)
V(network)$degree <- igraph::degree(network, v = V(network), mode = c("all"))
V(network)$gender <- as.character(att$Sex)#as.character needed to keep attribute in string format
V(network)$sex <- att$Sex
V(network)$id <- att$ID
V(network)$dept <- as.character(att$Department)
V(network)$department <- att$Department
V(network)$email <- as.character(att$EmailID)
V(network)$title <- as.character(att$Title)
V(network)$betweenness <- centralization.betweenness(network)$res
V(network)$eigen <- eigen_centrality(network, directed = TRUE)$vector
colrs <- c("orange2", "sky blue2")
V(network)$color <- colrs[V(network)$sex]
data_df <- data.frame(V(network)$id,
V(network)$name,
V(network)$gender,
V(network)$dept,
V(network)$title,
V(network)$email,
V(network)$degree,
V(network)$betweenness,
V(network)$eigen)
colnames(data_df) <- c("User_ID",
"Name",
"Gender",
"Department",
"Title",
"E-mail",
"Degree",
"Betweenness_Centrality",
"Eigenvector_Centrality")
head(data_df)
lay1 = layout.kamada.kawai(network, kkconst = vcount(network)/10)
lay2 <- layout_with_kk(network)
lay3 <- layout_nicely(network)
lay4 <- layout_with_fr(network)
lay5 <- layout.drl(network)
lay6 <- layout.sphere(network)
lay7 <- layout.auto(network)
set.seed(875)
par(mar=c(0,0,0,0)+0.1)
plot(network,
layout = lay2,
vertex.label = ifelse(V(network)$degree > 45, V(network)$title, NA),
vertex.label.color = "black",
vertex.label.cex = 0.8,
vertex.color = V(network)$color,
vertex.frame.color = "white",
vertex.size = V(network)$degree*0.2,
edge.arrow.size = 0.3,
edge.color = "grey",
main="Degree Centrality")
net.undir <- simplify(network, remove.multiple = FALSE, remove.loops = TRUE)
l1 <- layout_with_kk(net.undir)
l2 <- layout_nicely(net.undir)
l3 <- layout.fruchterman.reingold(net.undir)
comdet <- cluster_louvain(net.undir)
len <- length(comdet) # how many are there
net.undir <- simplify(network, remove.multiple = FALSE, remove.loops = TRUE)
net.undir <- as.undirected(net.undir)
l1 <- layout_with_kk(net.undir)
l2 <- layout_nicely(net.undir)
l3 <- layout.fruchterman.reingold(net.undir)
comdet <- cluster_louvain(net.undir)
len <- length(comdet) # how many are there
lou_size <- sizes(comdet) # how many inside each?
memb <- membership(comdet)
V(net.undir)$membership <- memb
summary(net.undir)
net.undir <- simplify(network, remove.multiple = FALSE, remove.loops = TRUE)
summary(net.undir)
net.undir <- as.undirected(net.undir)
summary(net.undir)
boxplot(data_df$Betweenness_Centrality, data_df$Gender)
par(mar=c(1,1,1,1)+4)
boxplot(data_df$Betweenness_Centrality, data_df$Gender)
par(mar=c(1,1,1,1)+2)
boxplot(data_df$Betweenness_Centrality, data_df$Gender)
boxplot(data_df$Betweenness_Centrality, data_df$Gender)
boxplot(data_df$Betweenness_Centrality)
M_bet_df <- ifelse(data_df$Gender = "M", data_df$Betweenness_Centrality, NA)
M_bet_df <- ifelse(data_df$Gender = M, data_df$Betweenness_Centrality, NA)
M_bet_df <- if(data_df$Gender = M, data_df$Betweenness_Centrality)
m_df <- data_df[data_df$Gender = "M"]
m_df <- data.frame(V(network)$sex, V(network)$betweenness)
View(m_df)
m_df <- m_df[m_df$V.network..sex = 2]
m_df <- m_df[m_df$V.network..sex == 2]
library(dplyr)
m_df <- data.frame(V(network)$sex, V(network)$betweenness)
colnames(m_df) <- (c("sex", "betweenness"))
filter(m_df,sex == 2)
bet_df <- data.frame(V(network)$sex, V(network)$betweenness)
colnames(bet_df) <- (c("sex", "betweenness"))
m_df <- filter(bet_df, sex == 2)
f_df <- filter(bet_df, sex == 1)
head(f_df)
bet_df <- data.frame(V(network)$gender, V(network)$betweenness)
colnames(bet_df) <- (c("sex", "betweenness"))
m_df <- filter(bet_df, sex == "M")
f_df <- filter(bet_df, sex == "F")
head(f_df)
boxplot(m_df, f_df)
m_df <- m_df$betweenness
head(m_df)
colnames(m_df) <- (c(Male))
colnames(m_df) <- (c("Male"))
bet1_df <- data.frame(m_df, f_df)
bet_df <- data.frame(V(network)$gender, V(network)$betweenness)
colnames(bet_df) <- (c("sex", "betweenness"))
m_df <- filter(bet_df, sex == "M")
m_df <- m_df$betweenness
f_df <- filter(bet_df, sex == "F")
f_df <- f_df$betweenness
boxplot(m_df, f_df)
head(f_df)
ggplot(bet_df, aes(x = sex, y = betweenness)) + geom_boxplot() + theme_minimal() + ggtitle("Betweenness Distribution by gender")
pdf("plots/Betweenness_distribution_by_gender")
ggplot(bet_df, aes(x = sex, y = betweenness)) + geom_boxplot() + theme_minimal() + ggtitle("Betweenness Distribution by gender")
dev.off()
pdf("plots/Betweenness_distribution_by_gender.pdf")
ggplot(bet_df, aes(x = sex, y = betweenness)) + geom_boxplot() + theme_minimal() + ggtitle("Betweenness Distribution by gender")
dev.off()
bet_df <- data.frame(V(network)$gender, V(network)$betweenness)
colnames(bet_df) <- (c("Gender", "Betweenness"))
ggplot(bet_df, aes(x = Gender, y = Betweenness)) + geom_boxplot() + theme_minimal() + ggtitle("Betweenness Distribution by gender")
ggplot(data_df, aes(x = gender, y = degree)) + geom_boxplot() + theme_minimal() + ggtitle("Degree Distribution by gender")
ggplot(data_df, aes(x = Gender, y = Degree)) + geom_boxplot() + theme_minimal() + ggtitle("Degree Distribution by gender")
